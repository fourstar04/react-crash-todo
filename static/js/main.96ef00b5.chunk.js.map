{"version":3,"sources":["components/TodoItem.js","actions/todoActions.js","actions/types.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","reducers/todoReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","markComplete","e","preventDefault","editTodo","deleteTodo","id","document","activeElement","blur","this","title","className","type","onChange","checked","style","onClick","Component","connect","dispatch","fetch","method","body","JSON","stringify","headers","then","response","json","payload","Todos","fetchTodos","todos","map","key","state","Header","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","AddTodo","setState","target","value","onSubmit","addTodo","name","flex","padding","placeholder","About","href","initialState","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","path","render","Fragment","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96ef00b5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { editTodo, deleteTodo } from '../actions/todoActions'\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            textDecoration: this.props.todo.completed ?\n                'line-through' : 'none'\n        }\n    }\n\n    markComplete = (e) => {\n        e.preventDefault()\n        let todo = this.props.todo\n        todo.completed = !todo.completed\n        this.props.editTodo(todo)\n    }\n\n    deleteTodo = (e) => {\n        e.preventDefault()\n        this.props.deleteTodo(this.props.todo.id)\n        document.activeElement.blur()\n    }\n\n    render() {\n        const { title, completed } = this.props.todo;\n        return (\n            <div className=\"list-group-item bg-white\">\n                <div className=\"form-control border-0 p-0 d-flex align-items-center\">\n                    <input className=\"mr-3 flex-shrink-0\" type=\"checkbox\" onChange={this.markComplete} checked={completed} />\n                    <span style={this.getStyle()}>{title}</span>\n                    <button className=\"btn btn-sm btn-outline-danger ml-auto\" onClick={this.deleteTodo}> X </button>\n                </div>\n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    deleteTodo: PropTypes.func.isRequired\n}\n\nexport default connect(null, { editTodo, deleteTodo })(TodoItem);\n","import { FETCH_TODOS, ADD_TODO, EDIT_TODO, DELETE_TODO } from './types';\n\nexport const fetchTodos = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/todos').then(response => {\n    return response.json()\n  }).then(todos => {\n    dispatch({\n      type: FETCH_TODOS,\n      payload: todos\n    })\n  })\n}\n\nexport const addTodo = (todo) => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/todos', {\n    method: 'POST',\n    body: JSON.stringify(todo),\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  })\n    .then(response => response.json())\n    .then(json => {\n      return dispatch({\n        type: ADD_TODO,\n        payload: json\n      })\n    })\n}\n\nexport const editTodo = (todo) => dispatch => {\n  fetch(`https://jsonplaceholder.typicode.com/todos/${todo.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(todo),\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  })\n    .then(response => response.json())\n    .then(json => {\n      return dispatch({\n        type: EDIT_TODO,\n        payload: json\n      })\n    })\n}\n\nexport const deleteTodo = (id) => dispatch => {\n  fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  })\n    .then(response => response.json())\n    .then(json => {\n      return dispatch({\n        type: DELETE_TODO,\n        payload: id\n      })\n    })\n}","export const FETCH_TODOS = 'FETCH_TODOS'\nexport const ADD_TODO = 'ADD_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { connect } from 'react-redux';\nimport { fetchTodos } from '../actions/todoActions'\n\nclass Todos extends Component {\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"list-group\">\n          {this.props.todos.map(todo => (\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} />\n          ))}\n        </div>\n      </div>\n\n    )\n  }\n}\n\n//PropTypes\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  todos: state.todos.todos\n});\n\nexport default connect(mapStateToProps, { fetchTodos })(Todos);\n","import React from 'react'\nimport { Link, NavLink } from 'react-router-dom';\n\nfunction Header() {\n  return (\n    <header>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <Link className=\"navbar-brand\" to=\"/\">Todo List</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div className=\"navbar-nav\">\n            <NavLink className=\"nav-item nav-link\" to=\"/\" exact>Home</NavLink>\n            <NavLink className=\"nav-item nav-link\" to=\"/about\">About</NavLink>\n          </div>\n        </div>\n      </nav>\n    </header>\n  )\n}\n\nexport default Header","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions/todoActions'\n\n\nexport class AddTodo extends Component {\n  state = {\n    title: ''\n  }\n\n  onChange = (e) => this.setState({ title: e.target.value })\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    this.props.addTodo({\n      title: this.state.title,\n      completed: false\n    })\n    this.setState({ title: '' })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <div className=\"container my-3\">\n          <div className=\"input-group\">\n            <input className=\"form-control\"\n              type=\"text\"\n              name=\"title\"\n              style={{ flex: '10', padding: '5px' }}\n              placeholder=\"Add Todo\"\n              value={this.state.title}\n              onChange={this.onChange}\n            />\n            <div className=\"input-group-append\">\n              <input className=\"btn btn-primary\" type=\"submit\" value=\"Submit\" />\n            </div>\n          </div>\n\n        </div>\n\n      </form>\n    )\n  }\n}\n\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n","import React from 'react'\n\nfunction About() {\n  return (\n    <div className=\"container my-3\">\n      <h1>About</h1>\n      <p>This app is a simple Todo List client that uses the <a href=\"https://jsonplaceholder.typicode.com\">JSON placeholder API</a> for mock content and REST API interaction.</p>\n      <p>This project was produced by following along with <a href=\"https://www.youtube.com/watch?v=sBws8MSXN7A\">Traversy Media's React JS Crash Course - 2019</a> video and then later blending in the lessons from <a href=\"https://www.youtube.com/watch?v=93p3LxR9xfM\">Traversy Media's Redux Crash Course with React</a>.  I would recommend these tutorials to anyone with javascript and mvc experience and an interest in learning the fundamentals of React applications and state management.</p>\n      <p>Check it out on <a href=\"https://github.com/fourstar04/react-crash-todo\">github</a></p>\n    </div>\n  )\n}\n\nexport default About;\n","import { FETCH_TODOS, ADD_TODO, EDIT_TODO, DELETE_TODO } from '../actions/types'\n\nconst initialState = {\n    todos: [],\n    todo: {}\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_TODOS:\n            return {\n                ...state,\n                todos: action.payload\n            }\n        case ADD_TODO:\n            return {\n                ...state,\n                todo: action.payload,\n                todos: [action.payload, ...state.todos], \n            }\n        case EDIT_TODO:\n            return {\n                ...state,\n                todo: action.payload,\n                todos: [...state.todos.map(todo => {\n                    if (todo.id === action.payload.id) return action.payload\n                    return todo\n                })], \n            }\n        case DELETE_TODO:\n            return {\n                ...state,\n                todos: [...state.todos.filter(todo => action.payload !== todo.id)]\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer.js';\n\nexport default combineReducers({\n    todos: todoReducer\n})","import {createStore, applyMiddleware, compose} from 'redux';\n// import {compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...middleware),\n    // compose(\n    //     applyMiddleware(...middleware),\n    //     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    // )    \n)\n\nexport default store\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { todos: [] }\n  }\n\n  // Toggle Complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (id === todo.id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    })\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Header />\n            <Route path=\"/\" exact render={props => (\n              <React.Fragment>\n                <AddTodo />\n                <Todos todos={this.state.todos} markComplete={this.markComplete} />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" render={props => (\n              <React.Fragment>\n                <About />\n              </React.Fragment>\n            )} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}