{"version":3,"sources":["components/TodoItem.js","actions/todoActions.js","actions/types.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","reducers/todoReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","e","preventDefault","editTodo","deleteTodo","id","this","title","style","type","onChange","checked","onClick","btnStyle","Component","color","border","borderRadius","cursor","float","connect","dispatch","fetch","method","body","JSON","stringify","headers","then","response","json","payload","Todos","fetchTodos","todos","map","key","state","headerStyle","textAlign","linkStyle","Header","to","AddTodo","setState","target","value","onSubmit","addTodo","display","name","flex","placeholder","className","backgroundColor","paragraphStyle","margin","About","href","initialState","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","path","exact","render","Fragment","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8911e3c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { editTodo, deleteTodo } from '../actions/todoActions'\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ?\n                'line-through' : 'none'\n        }\n    }\n\n    markComplete = (e) => {\n        e.preventDefault()\n        let todo = this.props.todo\n        todo.completed = !todo.completed\n        this.props.editTodo(todo)\n    }\n\n    deleteTodo = (e) => {\n        e.preventDefault()\n        this.props.deleteTodo(this.props.todo.id)\n    }\n\n    render() {\n        const { title, completed } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.markComplete} checked={completed} /> {' '}\n                    {title}\n                    <button onClick={this.deleteTodo} style={btnStyle}> x </button>\n                </p>\n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    deleteTodo: PropTypes.func.isRequired\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 5px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}\n\nexport default connect(null, { editTodo, deleteTodo })(TodoItem);\n","import { FETCH_TODOS, ADD_TODO, EDIT_TODO, DELETE_TODO } from './types';\n\nexport const fetchTodos = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/todos').then(response => {\n        return response.json()\n    }).then(todos => {\n        dispatch({\n            type: FETCH_TODOS,\n            payload: todos\n        })\n    })\n}\n\nexport const addTodo = (todo) => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/todos', {\n      method: 'POST',\n      body: JSON.stringify(todo),\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n    .then(response => response.json())\n    .then(json => {\n        return dispatch({\n            type: ADD_TODO,\n            payload: json\n        })\n    })\n}\n\nexport const editTodo = (todo) => dispatch => {\n    fetch(`https://jsonplaceholder.typicode.com/todos/${todo.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(todo),\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n    .then(response => response.json())\n    .then(json => {\n        return dispatch({\n            type: EDIT_TODO,\n            payload: json\n        })\n    })\n}\n\nexport const deleteTodo = (id) => dispatch => {\n    fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n    .then(response => response.json())\n    .then(json => {\n        return dispatch({\n            type: DELETE_TODO,\n            payload: id\n        })\n    })\n}","export const FETCH_TODOS = 'FETCH_TODOS'\nexport const ADD_TODO = 'ADD_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { connect } from 'react-redux';\nimport { fetchTodos } from '../actions/todoActions'\n\nclass Todos extends Component {\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  render() {\n    return this.props.todos.map(todo => (\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} />\n    ))\n  }\n}\n\n//PropTypes\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  todos: state.todos.todos\n});\n\nexport default connect(mapStateToProps, { fetchTodos })(Todos);\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link to=\"/\" style={linkStyle} >Home</Link> | <Link to=\"/about\" style={linkStyle}>About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: 'rebeccapurple',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\n\nexport default Header","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions/todoActions'\n\n\nexport class AddTodo extends Component {\n  state = {\n    title: ''\n  }\n\n  onChange = (e) => this.setState({ title: e.target.value})\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    this.props.addTodo({\n      title: this.state.title,\n      completed: false\n    })\n    this.setState({title: ''})\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n        <input \n          type=\"text\" \n          name=\"title\"\n          style={{flex: '10', padding: '5px'}}\n          placeholder=\"Add Todo\"\n          value={this.state.title}\n          onChange={this.onChange}\n        />\n        <input type=\"submit\" value=\"Submit\" className=\"btn\" style={{backgroundColor: 'rebeccapurple', color: '#FFF', flex: '1'}}/>\n      </form>\n    )\n  }\n}\n\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n","import React from 'react'\n\nfunction About() {\n    return (\n        <div style={{padding: '1rem 1rem'}}>\n            <h1>About</h1>\n            <p style={paragraphStyle}>This app is a simple Todo List client that uses the <a href=\"https://jsonplaceholder.typicode.com\">JSON placeholder API</a> for mock content and REST API interaction.</p>\n            <p style={paragraphStyle}>This project was produced by following along with <a href=\"https://www.youtube.com/watch?v=sBws8MSXN7A\">Traversy Media's React JS Crash Course - 2019</a> video and then later blending in the lessons from <a href=\"https://www.youtube.com/watch?v=93p3LxR9xfM\">Traversy Media's Redux Crash Course with React</a>.  I would recommend these tutorials to anyone with javascript and mvc experience and an interest in learning the fundamentals of React applications and state management.</p>\n        </div>\n    )\n}\n\nconst paragraphStyle = {\n    margin: '1rem 0'\n}\n\nexport default About;\n","import { FETCH_TODOS, ADD_TODO, EDIT_TODO, DELETE_TODO } from '../actions/types'\n\nconst initialState = {\n    todos: [],\n    todo: {}\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_TODOS:\n            return {\n                ...state,\n                todos: action.payload\n            }\n        case ADD_TODO:\n            return {\n                ...state,\n                todos: [action.payload, ...state.todos], \n            }\n        case EDIT_TODO:\n            return {\n                ...state,\n                todos: [...state.todos.map(todo => {\n                    if (todo.id === action.payload.id) return action.payload\n                    return todo\n                })], \n            }\n        case DELETE_TODO:\n            return {\n                ...state,\n                todos: [...state.todos.filter(todo => action.payload !== todo.id)]\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer.js';\n\nexport default combineReducers({\n    todos: todoReducer\n})","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    \n)\n\nexport default store\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {todos: []}\n  }\n\n  // Toggle Complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (id === todo.id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    })\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <div className=\"container\">\n              <Header />\n              <Route path=\"/\" exact render={props => (\n                <React.Fragment>\n                  <AddTodo />\n                  <Todos todos={this.state.todos} markComplete={this.markComplete} />\n                </React.Fragment>\n              )} />\n              <Route path=\"/about\" render={props => (\n                <React.Fragment>\n                  <About />\n                </React.Fragment>\n              )} />\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}